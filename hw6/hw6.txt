Problem 1.
a) P(A, A, B), P(x, y, z).
MGU is {x|A, y|A, z|B}

b) Q(y, G(A, B)), Q(G(x, x), y).
There is no unifier.

c) R(x, A, z), R(B, y, z).
MGU is {x|B, y|A}

d) Older(Father(y), y), Older(Father(x), John).
MGU is {x|John, y|John}

e) Knows(Father(y),y), Knows(x,x).
There is no unifier.

Problem 2.
* John likes all kinds of food.
* Apples are food.
* Chicken is food.
* Anything someone eats and isn’t killed by is food.
* If you are killed by something, you are not alive.
* Bill eats peanuts and is still alive.
* Sue eats everything Bill eats. 

a) In first-order logic:
Ax [Food(x) => Likes(John, x)].
Food(Apple).
Food(Chicken).
Ax [[Ey Eats(y, x) & ~Kills(x, y)] => Food(x)].
Ax [[Ey Kills(y, x)] => ~Alive(x)].
Eats(Bill, Peanuts) & Alive(Bill).
Ax [Eats(Bill, x) => Eats(Sue, x)].

b) Converting to CNF:
Ax [Food(x) => Likes(John, x)]:
Ax [~Food(x) | Likes(John, x)]
~Food(x) | Likes(John, x)

Food(Apple)
Food(Chicken)

Ax [[Ey Eats(y, x) & ~Kills(x, y)] => Food(x)]:
Ax [~(Ey Eats(y, x) & ~Kills(x, y)) | Food(x)]
Ax [(Ay ~Eats(y, x) | Kills(x, y)) | Food(x)]
~Eats(y, x) | Kills(x, y) | Food(x)

Ax [[Ey Kills(y, x)] => ~Alive(x)]:
Ax [~(Ey Kills(y, x)) | ~Alive(x)]
Ax [Ay ~Kills(y, x)) | ~Alive(x)]
~Kills(y, x) | ~Alive(x)

Eats(Bill, Peanuts) & Alive(Bill)

Ax [Eats(Bill, x) => Eats(Sue, x)]:
Ax [~Eats(Bill, x) | Eats(Sue, x)]
~Eats(Bill, x) | Eats(Sue, x)

In summary:
    1. ~Food(x) | Likes(John, x)
    2. Food(Apple)
    3. Food(Chicken)
    4. ~Eats(y, x) | Kills(x, y) | Food(x)
    5. ~Kills(y, x) | ~Alive(x)
    6. Eats(Bill, Peanuts) 
    7. Alive(Bill)
    8. ~Eats(Bill, x) | Eats(Sue, x)

c) Proving that John likes peanuts via resolution:
    1. ~Food(x) | Likes(John, x)
    2. Food(Apple)
    3. Food(Chicken)
    4. ~Eats(y, x) | Kills(x, y) | Food(x)
    5. ~Kills(y, x) | ~Alive(x)
    6. Eats(Bill, Peanuts) 
    7. Alive(Bill)
    8. ~Eats(Bill, x) | Eats(Sue, x)
    9. ~Likes(John, Peanuts)

    (1 through 8 are the knowledge base, 9 is ~alpha)

    10. ~Food(Peanuts)                          (1 and 9)   {x|Peanuts}
    11. Kills(Peanuts, Bill) | Food(Peanuts)    (6 and 4)   {x|Peanuts, y|Bill}
    12. ~Alive(Peanuts)                         (11 and 5)  {x|Bill, y|Peanuts}
    13. ~Kills(x, Bill)                         (5, 7)      {x|Bill}
    14. Food(Peanuts)                           (11, 14)
    15. Contradiction between 14 and 10

Since we've reached a contradiction, by refutation, we can conclude that John
likes peanuts.

d) Answering what Sue eats via resolution:
    1. ~Food(x) | Likes(John, x)
    2. Food(Apple)
    3. Food(Chicken)
    4. ~Eats(y, x) | Kills(x, y) | Food(x)
    5. ~Kills(y, x) | ~Alive(x)
    6. Eats(Bill, Peanuts) 
    7. Alive(Bill)
    8. ~Eats(Bill, x) | Eats(Sue, x)

Unifying 6 and 8 using {x|Peanuts}, we find that Sue eats peanuts.

e) Three new clauses (and clauses 6 and 7 removed):
* If you don’t eat, you die.
Ax [Ay ~Eats(x, y) => Dies(x)]
Ax [Ay Eats(x, y) | Dies(x)]
Eats(x, y) | Dies(x)

* If you die, you are not alive.
Ax Dies(x) => ~Alive(x)
Ax ~Dies(x) | ~Alive(x)
~Dies(x) | ~Alive(x)

* Bill is alive.
Alive(Bill)

New set of clauses:
    1. ~Food(x) | Likes(John, x)
    2. Food(Apple)
    3. Food(Chicken)
    4. ~Eats(y, x) | Kills(x, y) | Food(x)
    5. ~Kills(y, x) | ~Alive(x)
    6. ~Eats(Bill, x) | Eats(Sue, x) 
    7. Eats(x, y) | Dies(x)
    8. ~Dies(x) | ~Alive(x)
    9. Alive(Bill)

    10. ~Dies(Bill)                 (9 and 8)   {x|Bill}
    11. Eats(Bill, y)               (8 and 7)   {x|Bill}
    12. ~Kills(y, Bill)             (9 and 5)   {x|Bill}
    13. ~Eats(Bill, x) | Food(x)    (12 and 4)  {y|Bill}
    14. Food(x)                     (11 and 13) {y|x}
    15. Eats(Sue, x)                (11 and 6)  {y|x}

There is no unifier for x with #15 since we are not given enough information.
Thus, we cannot know what exactly Sue eats.

Problem 3.
(1) The instance of graph1 with 3 colors is not satisfiable.

(2) The instance of graph1 with 4 colors is satisfiable.

(3) The two SAT instances tells us that graph1 can only be colored using at 
least 4 colors. An answer that I got from running the SAT solver (formatted 
for clarity such that each row corresponds to one node's color assignment):

-1 -2 -3 4 
-5 -6 7 -8
-9 10 -11 -12
-13 -14 15 -16
17 -18 -19 -20
-21 22 -23 -24 
25 -26 -27 -28

This means that
* Node 1 gets color 4
* Node 2 gets color 3
* Node 3 gets color 2
* Node 4 gets color 3
* Node 5 gets color 1
* Node 6 gets color 2
* Node 7 gets color 1

(4) Using SAT instances like above, we find that the minimum number of colors 
required to properly color graph2 is 8.
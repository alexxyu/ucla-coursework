Total: 684 samples
     581  84.9%  84.9%      684 100.0% run
      59   8.6%  93.6%       59   8.6% SortedList_lookup
      44   6.4% 100.0%       44   6.4% SortedList_insert
       0   0.0% 100.0%      684 100.0% ?? /usr/src/debug////////glibc-2.17-c758a686/misc/../sysdeps/unix/sysv/linux/x86_64/clone.S:118
       0   0.0% 100.0%      684 100.0% start_thread
ROUTINE ====================== run in /u/cs/ugrad/alexandy/Desktop/cs-111/lab2b/lab2_list.c
   581    684 Total samples (flat / cumulative)
     .      .  100: 
     .      .  101: long long calc_time_diff(struct timespec start, struct timespec end) {
     .      .  102:     return 1000000000L * (end.tv_sec - start.tv_sec) + (end.tv_nsec - start.tv_nsec);
     .      .  103: }
     .      .  104: 
---
     .      .  105: void *run(void *threadid) {
     .      .  106:     long tid = (long) threadid;
     .      .  107:     long offset = tid * n_iters;
     .      .  108:     struct timespec start_tp, end_tp;
     .      .  109: 
     .      .  110:     for(long i=0; i<n_iters; i++) {
     .      .  111:         const char* key = pool[i+offset].key;
     .      .  112:         int idx = (*key) % n_lists;
     .      .  113: 
     .      .  114:         if(opt_sync == M_SYNC) {
     .      .  115:             clock_gettime(CLOCK_MONOTONIC, &start_tp);
     .      .  116:             pthread_mutex_lock(&mutexes[idx]);
     .      .  117:             clock_gettime(CLOCK_MONOTONIC, &end_tp);
     .      .  118:             wait_time[tid] += calc_time_diff(start_tp, end_tp);
     .      .  119:         } else if(opt_sync == S_SYNC) {
     .      .  120:             clock_gettime(CLOCK_MONOTONIC, &start_tp);
   296    296  121:             while(__sync_lock_test_and_set(&spinlocks[idx], 1) == 1);
     .      .  122:             clock_gettime(CLOCK_MONOTONIC, &end_tp);
     .      .  123:             wait_time[tid] += calc_time_diff(start_tp, end_tp);
     .      .  124:         }
     .      .  125: 
     .     44  126:         SortedList_insert(&lists[idx], &pool[i+offset]);
     .      .  127: 
     .      .  128:         if(opt_sync == M_SYNC) {
     .      .  129:             pthread_mutex_unlock(&mutexes[idx]);
     .      .  130:         } else if(opt_sync == S_SYNC) {
     .      .  131:             __sync_lock_release(&spinlocks[idx]);
     .      .  132:         }
     .      .  133:     }
     .      .  134: 
     .      .  135:     for(long i=0; i<n_lists; i++) {
     .      .  136:         if(opt_sync == M_SYNC) {
     .      .  137:             clock_gettime(CLOCK_MONOTONIC, &start_tp);
     .      .  138:             pthread_mutex_lock(&mutexes[i]);
     .      .  139:             clock_gettime(CLOCK_MONOTONIC, &end_tp);
     .      .  140:             wait_time[tid] += calc_time_diff(start_tp, end_tp);
     .      .  141:         } else if(opt_sync == S_SYNC) {
     .      .  142:             clock_gettime(CLOCK_MONOTONIC, &start_tp);
     1      1  143:             while(__sync_lock_test_and_set(&spinlocks[i], 1) == 1);
     .      .  144:             clock_gettime(CLOCK_MONOTONIC, &end_tp);
     .      .  145:             wait_time[tid] += calc_time_diff(start_tp, end_tp);
     .      .  146:         }
     .      .  147: 
     .      .  148:         SortedList_length(&lists[i]);
     .      .  149: 
     .      .  150:         if(opt_sync == M_SYNC) {
     .      .  151:             pthread_mutex_unlock(&mutexes[i]);
     .      .  152:         } else if(opt_sync == S_SYNC) {
     .      .  153:             __sync_lock_release(&spinlocks[i]);
     .      .  154:         }
     .      .  155:     }
     .      .  156: 
     .      .  157:     for(long i=0; i<n_iters; i++) {
     .      .  158:         const char* key = pool[i+offset].key;
     .      .  159:         long idx = *key % n_lists;
     .      .  160: 
     .      .  161:         if(opt_sync == M_SYNC) {
     .      .  162:             clock_gettime(CLOCK_MONOTONIC, &start_tp);
     .      .  163:             pthread_mutex_lock(&mutexes[idx]);
     .      .  164:             clock_gettime(CLOCK_MONOTONIC, &end_tp);
     .      .  165:             wait_time[tid] += calc_time_diff(start_tp, end_tp);
     .      .  166:         } else if(opt_sync == S_SYNC) {
     .      .  167:             clock_gettime(CLOCK_MONOTONIC, &start_tp);
   284    284  168:             while(__sync_lock_test_and_set(&spinlocks[idx], 1) == 1);
     .      .  169:             clock_gettime(CLOCK_MONOTONIC, &end_tp);
     .      .  170:             wait_time[tid] += calc_time_diff(start_tp, end_tp);
     .      .  171:         }
     .      .  172: 
     .     59  173:         SortedListElement_t *elem = SortedList_lookup(&lists[idx], key);
     .      .  174:         if(elem == NULL) {
     .      .  175:             fprintf(stderr, "Error: element that should have been in list was not found\n");
     .      .  176:             exit(2);
     .      .  177:         } else if(SortedList_delete(elem) == 1) {
     .      .  178:             fprintf(stderr, "Error: corrupted pointer(s) in list found\n");
     .      .  179:             exit(2);
     .      .  180:         }
     .      .  181: 
     .      .  182:         if(opt_sync == M_SYNC) {
     .      .  183:             pthread_mutex_unlock(&mutexes[idx]);
     .      .  184:         } else if(opt_sync == S_SYNC) {
     .      .  185:             __sync_lock_release(&spinlocks[idx]);
     .      .  186:         }
     .      .  187:     }
     .      .  188:     return NULL;
     .      .  189: }
---
     .      .  190: 
     .      .  191: int main(int argc, char *argv[]) {
     .      .  192: 
     .      .  193:     const struct option long_options[] = {
     .      .  194:         {"threads", required_argument, 0, 't'},
ROUTINE ====================== run in /u/cs/ugrad/alexandy/Desktop/cs-111/lab2b/lab2_list.c
   581    684 Total samples (flat / cumulative)
     .      .  100: 
     .      .  101: long long calc_time_diff(struct timespec start, struct timespec end) {
     .      .  102:     return 1000000000L * (end.tv_sec - start.tv_sec) + (end.tv_nsec - start.tv_nsec);
     .      .  103: }
     .      .  104: 
---
     .      .  105: void *run(void *threadid) {
     .      .  106:     long tid = (long) threadid;
     .      .  107:     long offset = tid * n_iters;
     .      .  108:     struct timespec start_tp, end_tp;
     .      .  109: 
     .      .  110:     for(long i=0; i<n_iters; i++) {
     .      .  111:         const char* key = pool[i+offset].key;
     .      .  112:         int idx = (*key) % n_lists;
     .      .  113: 
     .      .  114:         if(opt_sync == M_SYNC) {
     .      .  115:             clock_gettime(CLOCK_MONOTONIC, &start_tp);
     .      .  116:             pthread_mutex_lock(&mutexes[idx]);
     .      .  117:             clock_gettime(CLOCK_MONOTONIC, &end_tp);
     .      .  118:             wait_time[tid] += calc_time_diff(start_tp, end_tp);
     .      .  119:         } else if(opt_sync == S_SYNC) {
     .      .  120:             clock_gettime(CLOCK_MONOTONIC, &start_tp);
   296    296  121:             while(__sync_lock_test_and_set(&spinlocks[idx], 1) == 1);
     .      .  122:             clock_gettime(CLOCK_MONOTONIC, &end_tp);
     .      .  123:             wait_time[tid] += calc_time_diff(start_tp, end_tp);
     .      .  124:         }
     .      .  125: 
     .     44  126:         SortedList_insert(&lists[idx], &pool[i+offset]);
     .      .  127: 
     .      .  128:         if(opt_sync == M_SYNC) {
     .      .  129:             pthread_mutex_unlock(&mutexes[idx]);
     .      .  130:         } else if(opt_sync == S_SYNC) {
     .      .  131:             __sync_lock_release(&spinlocks[idx]);
     .      .  132:         }
     .      .  133:     }
     .      .  134: 
     .      .  135:     for(long i=0; i<n_lists; i++) {
     .      .  136:         if(opt_sync == M_SYNC) {
     .      .  137:             clock_gettime(CLOCK_MONOTONIC, &start_tp);
     .      .  138:             pthread_mutex_lock(&mutexes[i]);
     .      .  139:             clock_gettime(CLOCK_MONOTONIC, &end_tp);
     .      .  140:             wait_time[tid] += calc_time_diff(start_tp, end_tp);
     .      .  141:         } else if(opt_sync == S_SYNC) {
     .      .  142:             clock_gettime(CLOCK_MONOTONIC, &start_tp);
     1      1  143:             while(__sync_lock_test_and_set(&spinlocks[i], 1) == 1);
     .      .  144:             clock_gettime(CLOCK_MONOTONIC, &end_tp);
     .      .  145:             wait_time[tid] += calc_time_diff(start_tp, end_tp);
     .      .  146:         }
     .      .  147: 
     .      .  148:         SortedList_length(&lists[i]);
     .      .  149: 
     .      .  150:         if(opt_sync == M_SYNC) {
     .      .  151:             pthread_mutex_unlock(&mutexes[i]);
     .      .  152:         } else if(opt_sync == S_SYNC) {
     .      .  153:             __sync_lock_release(&spinlocks[i]);
     .      .  154:         }
     .      .  155:     }
     .      .  156: 
     .      .  157:     for(long i=0; i<n_iters; i++) {
     .      .  158:         const char* key = pool[i+offset].key;
     .      .  159:         long idx = *key % n_lists;
     .      .  160: 
     .      .  161:         if(opt_sync == M_SYNC) {
     .      .  162:             clock_gettime(CLOCK_MONOTONIC, &start_tp);
     .      .  163:             pthread_mutex_lock(&mutexes[idx]);
     .      .  164:             clock_gettime(CLOCK_MONOTONIC, &end_tp);
     .      .  165:             wait_time[tid] += calc_time_diff(start_tp, end_tp);
     .      .  166:         } else if(opt_sync == S_SYNC) {
     .      .  167:             clock_gettime(CLOCK_MONOTONIC, &start_tp);
   284    284  168:             while(__sync_lock_test_and_set(&spinlocks[idx], 1) == 1);
     .      .  169:             clock_gettime(CLOCK_MONOTONIC, &end_tp);
     .      .  170:             wait_time[tid] += calc_time_diff(start_tp, end_tp);
     .      .  171:         }
     .      .  172: 
     .     59  173:         SortedListElement_t *elem = SortedList_lookup(&lists[idx], key);
     .      .  174:         if(elem == NULL) {
     .      .  175:             fprintf(stderr, "Error: element that should have been in list was not found\n");
     .      .  176:             exit(2);
     .      .  177:         } else if(SortedList_delete(elem) == 1) {
     .      .  178:             fprintf(stderr, "Error: corrupted pointer(s) in list found\n");
     .      .  179:             exit(2);
     .      .  180:         }
     .      .  181: 
     .      .  182:         if(opt_sync == M_SYNC) {
     .      .  183:             pthread_mutex_unlock(&mutexes[idx]);
     .      .  184:         } else if(opt_sync == S_SYNC) {
     .      .  185:             __sync_lock_release(&spinlocks[idx]);
     .      .  186:         }
     .      .  187:     }
     .      .  188:     return NULL;
     .      .  189: }
---
     .      .  190: 
     .      .  191: int main(int argc, char *argv[]) {
     .      .  192: 
     .      .  193:     const struct option long_options[] = {
     .      .  194:         {"threads", required_argument, 0, 't'},

{\rtf1\ansi\ansicpg1252\cocoartf1671\cocoasubrtf600
{\fonttbl\f0\fswiss\fcharset0 Helvetica-Bold;\f1\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\b\fs24 \cf0 \ul \ulc0 PHASE 3
\f1\b0 \ulnone \
1 920\
\
%rcx = %rsp + 8 (2nd)\
%rdx = %rsp + c (1st)\
\
%esi = 0x402745 (%d %d string formatter)\
\
<+34>\
1st check: explode if (2nd) > 7\
%eax = (1st)\
\
jump?\
\
<+59>\
%eax = 0x398\
\
cmp %eax w/ 1st\
explode if not equal\
\

\f0\b \ul PHASE 4\

\f1\b0 \ulnone 12 43\
\
$rsp + 0x8 = (2nd)\
$rsp + 0xc = (1st)\
\
compare 1st w/ e\
explode if 1st >= e\
\
%edx = 0xe\
%esi = 0x0\
%edi = (1st)\
\
call func_4, which manipulates %eax\
%eax = 0xe\
%ebx = 0xe\
\
%ebx -> 0\
%ebx = 0xe\
%ebx = 0x7\
cmp (1st) and %ebx\
if %ebx, aka 0x7 > (1st), <+26>\
else, <+38>\
\
<+26>\
%edx = %ebx - 1\
%ebx = %ebx + %eax\
%eax = %ebx\
RETURN\
\
<+38>\
%esi = %rbx + 1 = 0x8\
call func4\
	%eax = %edx = 0xe\
	%eax = %eax - %esi = 0x6\
	%ebx = %eax = 0x6\
	%ebx -> 0\
	%ebx = %eax = 0x6\
	%ebx = 0x3\
	%ebx = %esi + %ebx = 0xb\
\
%ebx = %ebx + %eax\
%eax = %ebx\
RETURN\
\
cmp %eax with 0x2b\
explode if not equal\
\
compare (2nd) w/ 0x2b\
explode if not equal\
\

\f0\b \ul PHASE 5\

\f1\b0 \ulnone 5 115\
\
%rsp+0x8 = (2nd) = %rcx\
%rsp+0xc = (1st) = %rdx\
\
\
%eax = (1st)\
%eax AND 0xf (0x1111)\
(1st) = %eax\
\
compare 0xf and %eax\
if 0xf == %eax, explode (aka, 1st CANNOT be 0xf)\
\
%ecx = 0\
%edx = 0\
\
compare %eax and 0xf\
if not equal, LOOP to <+60>\
LOOP:\
	%edx ++					1st pass: 1\
	%eax = (%rax*4+0x4024e0)		1st pass: value of ((1st)*4+0x4024e0) = 2\
	%ecx += %eax				1st pass: 2\
	goto LOOP if %eax != 0xf\
\
(1st) = 0xf\
if %edx != 0xf, explode (aka, there must be 15 iterations through the loop)\
if %ecx != (2nd), explode (%ecx = 0x73)\
\
offsets:\
+0: 0x0a 0\
+4: 0x02 1\
+8: 0x0e 2\
+12: 0x07 3\
+16: 0x08 4\
+20: 0x0c 5\
+24: 0x0f 6 (FINAL, aka get to 6)\
+28: 0x0b 7\
+32: 0x00 8\
+36: 0x04 9\
+40: 0x01 A\
+44: 0x0d B\
+48: 0x03 C\
+52: 0x09 D\
+56: 0x06 E\
\
5 -> C -> 3 -> 7 -> B -> D -> 9 -> 4 -> 8 -> 0 -> A -> 1 -> 2 -> E -> 6 (END)\
\

\f0\b \ul PHASE 6\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f1\b0 \cf0 \ulnone 4 5 6 2 1 3\
\
\ul KNOWN CLUES:\ulnone \
\'95 they must be unique numbers\
\'95 1 \uc0\u8804  d \u8804  6\
\
read_six_numbers\
%r12 = %rsp + 0x30 -> 1st\
%r13d = 1\
\
jump to <+73>\
%rbp = %r12 -> 1st\
%eax = (1st) - 1\
compare 0x5 and %eax\
explode if %eax > 0x5  (aka, (1st) <= 6)\
\
jump to <+99> if %r13 > 0x5\
else, goto <+94>\
\
1st time: <+94>\
%rbx = %r13 = 1\
jump to <+49>\
\
<+49>:\
%eax = (0x30 + %rsp + 4*%rbx)\
explode if $eax == (%rbp)\
jump to <+40> loop:\
%rbx += 1 (after 1st pass, %rbx = 2)\
if %ebx > 0x5, jump to <+65>\
else, <+49>\
\
(this basically makes sure that (1st) is unique when %rbp -> (1st))\
%rbx: offset in memory, counter\
%eax: memory value to check with %rbp\
%rbp: value to check\
\
<+65>: (basically makes sure all values are unique)\
%r13 += 1 (2)\
%r12 += 4 (next # in memory) -> 2nd\
%rbp = %r12 (next # in memory) -> 2nd\
%eax = (%r12) = (2nd)\
%eax -= 1\
EXPLODE if %eax > 0x5 (%eax must be <= 6)\
if %r13 > 0x5 jump to <+99> \
else, %rbx = %r13 (2)\
jump to <+49> again\
\
<+99>: \
%esi = 0\
<+104>:\
%ecx = (%rsp + 0x30 + %esi*4) (initially (1st))\
%eax = 1\
%edx = (0x6042f0)\
if $ecx <= 0x1, jump to <+134>\
else, \
%eax += 1\
%rdx = (%rdx+0x8) (initially 0x604300)\
if %eax != %ecx, repeat (value of %rdx depends on value of %ecx)\
else, go to <+134>\
\
%ecx will iterate from (1st) to (5th)\
\
<+134>:\
(%rsp+8*%rsi) = %rdx	(initially: (%rsp) = 0x6042f0)\
%rsi += 1\
if %rsi != 0x6, jump to <+104>, which sets up last part of stack with values determined by input\
\
<+148> to <+193>:\
(n1 + 8) = n2\
(n2 + 8) = n3\
(n3 + 8) = n4\
(n4 + 8) = n5\
(n5 + 8) = n6\
(n6 + 8) = 0\
\
(%rsp+0x28) = 0\
%ebp = 0\
jump to <+221>\
\
<+212>:\
%rbx = (%rbx + 0x8)\
%ebp -= 1\
if %ebp = 1, SUCCESS\
<+221>:\
%rax = (%rbx+0x8)\
%rax = (%rax)\
EXPLODE if (%rbx) <= %eax\
jump to <+212>\
\
Locations:\
%rsp+0x30 = 1st\
%rsp+0x34 = 2nd\
%rsp+0x38 = 3rd\
%rsp+0x3c = 4th\
%rsp+0x40 = 5th\
%rsp+0x44 = 6th\
\
(%rsp + 0x00) = %rdx determined by %ecx\
(%rsp + 0x08) = %rdx determined by %ecx\
(%rsp + 0x10) = %rdx determined by %ecx\
(%rsp + 0x18) = %rdx determined by %ecx\
(%rsp + 0x20) = %rdx determined by %ecx\
(%rsp + 0x28) = %rdx determined by %ecx\
\
%rdx = 0x6042f0			(%ecx = 1)\
(%rdx + 8) = 0x604300		(%ecx = 2)\
(%rdx + 16) = 0x604310		(%ecx = 3)\
(%rdx + 24) = 0x604320		(%ecx = 4)\
(%rdx + 32) = 0x604330		(%ecx = 5)\
(%rdx + 40) = 0x604340		(%ecx = 6)\
\
(0x6042f0) = 0x287\
(0x604300) = 0x248\
(0x604310) = 0x2ec\
(0x604320) = 0x16a\
(0x604330) = 0x18d\
(0x604340) = 0x236\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 \

\f0\b \ul SECRET PHASE\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f1\b0 \cf0 \ulnone 20\
\
%rdi = string\
%edx = 0xa\
%esi = 0\
\
strtol converts $rdi to long\
%rbx = %rax\
%eax = %rax - 1\
EXPLODE if %eax > 0x3e8 (input <= 0x3e8 = 1000)\
\
%esi = %ebx = input\
%edi = 0x604110\
call fun7\
\
EXPLODE if return value (%eax) != 0x2\
SUCCESS\
\
fun7:\
if %rdi & %rdi == 0, jump to <+55> (return with value 0xffffffff)\
%edx = (%rdi)\
if %edx > %esi, jump to <+27>\
%eax = 0\
jne => <+40>\
\
<+20>:\
\
<+27>:\
%rdi = (%rdi+0x8)\
call fun7\
%eax += %eax\
jump to <+22> and return\
\
<+40>:\
%rdi = (%rdi+0x10)\
call fun7\
%eax = 1+(2*%rax)\
jump to <+22> and return\
\
order of return: inner return with %eax = 0 => <+40> with %eax = 1 => <+27> => return\
\
(0x604110) = 0x24 = 36\
\
int fun7(int* arg1, int arg2) \{\
    if(arg1 == 0) \{\
    	return 0xFFFFFFFF;\
    \}\
\
    int temp = *arg1;		// %edx\
    int retVal = 0;		// %rax\
    if(temp > arg2) \{\
	arg1 = *(arg1+8);\
	retVal = fun7(arg1, arg2);\
	retVal *= 2;\
    \} \
    else if(temp != arg2) \{\
	arg1 = *(arg1+0x10);\
	retVal = fun7(arg1, arg2);\
	retVal = 2*retVal + 1;\
    \}\
\
    return retVal;\
\}\
}